#include<stdio.h>
#include<stdlib.h>
#include<limits.h>

#define MAX_NODES 100

int n;
int adj[MAX_NODES][MAX_NODES];
int dist[MAX_NODES];
int visited[MAX_NODES];
int previous[MAX_NODES];

int minDistance() {
    int min = INT_MAX, minIndex;
    int i;
    for (i = 0; i < n; i++) {
        if (visited[i] == 0 && dist[i] <= min) {
            min = dist[i];
            minIndex = i;
        }
    }
    return minIndex;
}

void dijkstra(int src) {
    int i, j;
    for (i = 0; i < n; i++) {
        dist[i] = INT_MAX;
        visited[i] = 0;
    }
    dist[src] = 0;
    for (i = 0; i < n-1; i++) {
        int u = minDistance();
        visited[u] = 1;
        for (j = 0; j < n; j++) {
            if (!visited[j] && adj[u][j] && dist[u] != INT_MAX && dist[u]+adj[u][j] < dist[j]) {
                dist[j] = dist[u] + adj[u][j];
                previous[j] = u;
            }
        }
    }
}

int main() {
    int i, j, src;
    printf("Enter number of nodes: ");
    scanf("%d", &n);
    printf("Enter adjacency matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &adj[i][j]);
        }
    }
    printf("Enter starting node: ");
    scanf("%d", &src);
    dijkstra(src);
    printf("Shortest distance from node %d:\n", src);
    for (i = 0; i < n; i++) {
        printf("Node %d: %d\n", i, dist[i]);
    }
    return 0;
}
