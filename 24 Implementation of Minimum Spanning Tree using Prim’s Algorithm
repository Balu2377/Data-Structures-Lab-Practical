#include<stdio.h>
#include<stdlib.h>
#include<limits.h>

#define MAX_NODES 100

int n;
int adj[MAX_NODES][MAX_NODES];
int visited[MAX_NODES];
int key[MAX_NODES];
int parent[MAX_NODES];

int minKey() {
    int min = INT_MAX, minIndex;
    int i;
    for (i = 0; i < n; i++) {
        if (visited[i] == 0 && key[i] < min) {
            min = key[i];
            minIndex = i;
        }
    }
    return minIndex;
}

void primMST() {
    int i, j;
    for (i = 0; i < n; i++) {
        key[i] = INT_MAX;
        visited[i] = 0;
    }
    key[0] = 0;
    parent[0] = -1;
    for (i = 0; i < n-1; i++) {
        int u = minKey();
        visited[u] = 1;
        for (j = 0; j < n; j++) {
            if (adj[u][j] && visited[j] == 0 && adj[u][j] < key[j]) {
                parent[j] = u;
                key[j] = adj[u][j];
            }
        }
    }
}

int main() {
    int i, j;
    printf("Enter number of nodes: ");
    scanf("%d", &n);
    printf("Enter adjacency matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            scanf("%d", &adj[i][j]);
        }
    }
    primMST();
    printf("Minimum spanning tree:\n");
    for (i = 1; i < n; i++) {
        printf("%d - %d: %d\n", parent[i], i, adj[i][parent[i]]);
    }
    return 0;
}
